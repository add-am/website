---
title: "Northern Three Spatial Analyses (Freshwater: Fish Sampling Sites)"
subtitle: "sub title"
author: "Adam Shand"
date: "11/26/2023"
format: html
params:
  project_crs: "EPSG:7844"
---

::: {.callout-tip}
## R Version
For R session info at the time of rendering this script see @sec-sessioninfo.
:::

# Introduction

This is a simple script to produce a map of sampling locations for the Fish indicator category in the Freshwater environment for the Dry Tropics region.

# Script Set Up

Below we load the required packages for the script.

```{r}
#| label: Load packages

library(sf) 
library(tmap)
library(glue)
library(here)
library(tidyverse)
library(dataaimsr)

```

Then set the coordinate reference system and save location.

```{r}
#| label: global vars and initial setup
#| output: false

#set crs
proj_crs <- params$project_crs

#create a file path to help with saving things
save_path <- here("outputs/dt_maps_fish/")

#create a data path as well
data_path <- here("data/dt_maps_fish/")

#bring that path to life
dir.create(here(save_path))

#turn off S2 mapping
sf_use_s2(FALSE)

```

# Load Data

Once our work space is set up we then need to bring in data  to create the maps. The background/location data is our usual basin/region outline, however the key data for this analysis is the breakdown of streams that are impounded or not impounded. This data is provided by David Moffatt.

```{r}
#| label: load core datasets
#| output: false

##please note if the data is not in the basin builder folder, try running the basin builder script
dry_tropics <- st_read(here("data/n3_region-builder/n3_region.gpkg")) |> st_transform(proj_crs) |> 
  filter(environment != "Marine", region == "Dry Tropics")

#read in qld outlines data from the gisaimsr package, filter for land and islands, update crs
qld <- get(data("gbr_feat", package = "gisaimsr")) |> filter(FEAT_NAME %in% c("Mainland", "Island")) |> 
  st_transform(proj_crs)

#read in the main dataset
fish_sample_sites <- st_read(glue("{data_path}/fish_monitoring_sites.gpkg")) |> st_transform(proj_crs)

#read in the impounded waters - we will use this for our streams
impounded_waters <- st_read(here("data/dt_maps_impoundment-length/impounded_and_not_impounded_waters.gpkg")) |> st_transform(proj_crs)

#create a townsville point coord
tsv <- st_as_sf(data.frame(place = "Townsville", x = "-19.2590", y = "146.8169"), coords = c("y", "x"), crs = proj_crs)

```

# Maipulate Data

Before we can create the map we just need to manipulate the data bit to remove unnecessary visual clutter.

```{r}
#| label: create label jitter for maps

#rather than trying to move each site we will just do a randomized jitter and re run the script if it doesn't look good.
labels <- st_jitter(fish_sample_sites, 0.02)

```

# Create Map

And finally we can produce the required maps to be used in our technical report style.

```{r}
#| label: create map

#create a map of the area
map <- tm_shape(qld) +
  tm_polygons(col = "grey80", border.col = "black") +
  tm_shape(dry_tropics) +
  tm_polygons(border.col = "black") +
  tm_shape(impounded_waters, is.master = T) +
  tm_lines(lwd = 0.5, col = "blue", alpha = 0.5) +
  tm_shape(fish_sample_sites, is.master = T) +
  tm_symbols(shape = 21, border.col = "Black", col = "short_name", size = 0.5, palette = "Set3") +
  tm_text("waterway", size = 0.65, auto.placement = T, shadow = T) +
  tm_shape(tsv) +
  tm_symbols(size = 0.5, col = "white", border.col = "black", border.lwd = 2, shape = 23) +
  tm_text("place", shadow = T, xmod = -2.5, ymod = 0.1) +
  tm_add_legend(type = "line", col = "blue", labels = "Watercourses")  +
  tm_layout(legend.frame = T, legend.bg.color = "White", asp = 1.1, 
            legend.text.size = 0.7, legend.position = c("left", "bottom")) +
  tm_scale_bar(width = 0.15, text.size = 0.7, position = c(0.23, 0)) +
  tm_compass(position = c("right", "top"))

#save the map as a png
#tmap_save(map, filename = glue("{save_path}/fish-sampling-locations.png"))

```

Script complete :) Below is an interactive example of the maps created.

```{r}
#| label: interactive map example

#tmap_mode("view")

map

```

# Session Info {#sec-sessioninfo}

Below is the session info at the time of rendering this script. Of greatest importance is to note the R version, and the "other attached packages" as these are the most significant drivers of success/failure. It is also good to check the "attached base packages" and "loaded via a namespace" packages as well. To check your session info use `sessionInfo()`.

```{r}
#| label: show session info

sessionInfo()

```








