---
title: "An Epic Battle Between For Loops and Vectorised Functions"
date: "01/04/2025"
abstract-title: "ABSTRACT"
abstract: "TBD."
image: "image.png"
format: html
title-block-banner: true #This is our banner
include-after-body: "../../html/html_footer.html" #This is our footer
---

```{r}
#| output: FALSE
#| echo: FALSE
#| code-fold: TRUE

library(purrr)

```

# Introduction

[Functions](../learning_to_create_custom_functions/index.qmd) and [for loops](../going_loopy_for_for_loops/index.qmd)... If you haven't read my blog posts on these two topics I will shamelessly self promote and say that you should. But honestly, I would like to think that the content written here can be understood without any prior knowledge. So please, read on if you want!

If you are not aware, the tension between vectorise functions and for loops is weirdly high. Some people say that vectorised functions are easier to read and understand, others swear that for loops are a more obvious and legible option. Some people prioritise processing time above all else and will create vectorised functions for everything, others say that in todays' coding languages it really doesn't make much of a different.

So which is it? What do I use? Why do I use it? The idea of my blog today to try and pull apart the differences between vectorised functions and for loops as they relate to my work. I will then dive deeper into how you can use vectorised functions, and code up some examples.

# Whats What?

Okay so first of all lets just have a quick refresher on what exactly vectorised functions and for loops are exactly.

## Vectorised Functions

This is a bit of a weird analogy but you can think of a vectorised function almost like a shotgun. The idea is that all the actions are completed at the same time in one big boom (like how all the pellets in a shotgun fire at the same time). To do this, you take any "normal" function with the following structure `your_function_name <- function(inputs){code}` and place this inside a "special" vectoring function such as `map()` or `lapply()`. The special vectoring function does all the repetition of the normal function.

:::{.callout-note}
I will once again promote my [functions](../learning_to_create_custom_functions/index.qmd) blog, which will help you understand the "normal" function within the "special" vectoring function.
:::

## For Loops 

In contrast, a for loop is more like a chain-gun, with each action completed one after the other in rapid succession. In this analogy you take any "normal" function with the following structure `your_function_name <- function(inputs){code}` and place this inside the repeating for loop. The normal function is then repeated for each iteration of the loop.

:::{.callout-note}
You know where to go if you want to know more... [for loops](../going_loopy_for_for_loops/index.qmd).
:::

![image](image.png)

## Similarities and Differences

With a better understanding of the idea behind each method, we can now summarise some of the main similarities and differences that exist in practice;

Similarities:

 - Used for repeated action, to do something several times over
 - Are often lauded as "efficient", "effective", and "scalable"
 - Can be daunting for newcomers
 
Differences:

 - Different structure/syntax/method
 - Vectorised functions are (in my opinion) more vague
 - Loops are great to work on products of previous loops (vectorised functions can't do that)
 - Vectorised functions are an equal speed or faster (depending the scenario)

## Examples of Each

Sometimes its just easier with some practical examples: lets pretend that we have a vector of numbers from 1 to 10 that each need to have 1 added to them. (Yes I know we don't actually need a vectorised function or for loop to do this, but lets pretend we do).

So how would this look in a for loop?

First we have our numbers:

```{r}

our_numbers <- c(1:10)

our_numbers

```

Then we have our loop:

```{r}

#create an empty vector to store the output
our_num_plus_1 <- vector(mode = "numeric", length = length(our_numbers))

#run the loop
for (i in 1:length(our_numbers)){
  
  #replace the number in the empty vector with tbe new number
  our_num_plus_1[i] <- our_numbers[i] + 1
  
}

```

And then our output:

```{r}

our_num_plus_1

```

To contrast, here is the vectorised function. First we would create our numbers (we did that above), then we have the vectorised function:

```{r}

#use map_int to return a integer vector
our_num_plus_2 <- map_int(our_numbers, \(x) x + 1)

```

And our output:

```{r}

our_num_plus_2

```

Identical outputs, as expected.

Comparing the two side by side in this way confirms our early observations, and tell us more. For example, I stated above that I find vectorised functions to be more vague, and in this example it seems to be the case. Looking at the code it is not at all clear what the function `map_int()` does, nor how `our_numbers` and `+ 1` interact with each other, and what the hell is that `\(x)` doing there? In contrast, the for loop might take a few more lines of code, but it is probably a bit easier to understand that the code is meant to do something a few times in a row, even if you can't quite pick what exact it is.

# The Nitty Gritty

Okay so to recap, we have a general understanding of how vectorised functions and for loops work, and have looked at a super simple example of this. Further, if you want to learn more about making your own for loops or functions I have blogs for that. What we haven't covered yet (or in another blog), is the nitty gritty of **how** a vectorised function works... so I guess that is the focus now!

To start off with, a "vectorised function" is a function that takes a vector as an input and runs a function for each element in the vector. In the analogy above we talked about a shotgun, and in the diagram (also above) you can see that `func` has been duplicated within `map`. In both cases the idea is that the function is applied multiple times without needing to write the code multiple times, or write a for loop.

There are two main methods of vectorising a function, both methods have three key elements:

 1. The function you want to run a bunch of times
 2. The vector that you want to run the function on
 3. The vectorising function (i.e. the thing that makes it work).
 
The only difference between the two methods is the third element, the vectorising function. The first method uses base R - that is to say you don't need to install and R packages. In the first method the vectorising functions come under the "apply" family, such as `lapply()`, `mapply()`, and `vapply()`. For the second method you need to install the "Purrr" package, which gives you access to the "map" family of functions, such as `map()`, `map2()`, and `map_int()`. As you can probably already tell from my early example, I prefer using the Purrr package (yep, triple r). I find that the function names make more sense, and there are a lot more things you can do with the functions.

## Purrr

:::{.callout-note}
As with most topics I have written about, I would highly recommend that you check out the webpage written for the [Purrr](https://purrr.tidyverse.org/index.html) package. It has excellent documentation and some basic examples that cover the major use cases you would expect to encounter.
:::

The basic syntax of a purrr mapping function is as follows: 

 - option 1: `map(vector, function)` 
 - option 2: `map(vector, \(x) x + 1)`
 - option 3: `map(vector, \(x) function(x))`

As well as some older methods that are no longer actively recommended, but that you might find in old code:

 - out-dated option 1: `map(vector, ~ .x + 1)`
 - out-dated option 2: `map(vect, ~ function(.x))`

You will note that I have written more than one example of the syntax, this is not a mistake. Annoyingly there are multiple "correct" ways to write the code depending on the situtation... Yea I know. I'll do my best to explain each one.

### Syntax Option 1

Syntax: `map(vector, function)`

Summary: no explicit designation of x and y, but does have a named function.

#### Breakdown

The first argument in the map function is always our vector. This is then always followed by a comma no matter what. Finally we write the function that we want to repeat a bunch of times. IMPORTANT! In this syntax the function we are repeating does **not** have any brackets after it.

#### Why Choose This Way?

This option is the most streamlined choice. It has very little moving parts and thus very little that you can write incorrectly. However, the downside of using this method is that you need to be familiar with the `map()` function otherwise it is really not clear what the code is doing. There are two addition downsides to this method that mean it is not always the right choice:

 1. The function you want to repeat has to be named, i.e. it needs to be something like `mean()`, `sum()`, etc. Or a custom function that you have written and given a name.
 2. `map()` assumes that the first argument in the function you want to repeat is where the vector should go, if the vector needs to go somewhere else you will have to use a different syntax.

As an example

```{r}

#This won't do anything to the numbers because it is taking the mean of 1 number each time
as_vector(map(our_numbers, mean))

```
 
### Syntax Option 2

Syntax: `map(vector, \(x) x + 1)`

Summary: for anonymous (not named) functions that are simple.

#### Breakdown

The first argument in the map function is always our vector. This is then always followed by a comma no matter what. In this option we then write `\(x)`, this is essentially saying that from this point on the vector is now "x". We follow this up by writing the code we want to apply to the vector such as adding 1 to the each element in the vector, which looks like `x + 1`. IMPORTANT! In this syntax this is **no comma** between `\(x)` and the code you want to apply.

#### Why Choose This Way?

This option is great when the thing you want to do to the vector does not have a pre-existing function. An additional benefit of this option is that it is one of the clearest ways to demonstrate what is happening to the vector. However, this option is not always the best choice if the thing you want to do to the vector is super complicated and take several lines of code to write. If that is the case, I would recommend writing your own custom function that encapsulates the things you want to do, and then providing this custom function to map using option 1 or 3.

:::{.callout-note}
The  "x" in `\(x) x + 1` is just a placeholder. If you really wanted to, you could write `\(cashew) cashew + 1` and it would work fine. However, you can't change the backslash, brackets, or lack of comma.
:::

Example 1:

```{r}

as_vector(map(our_numbers, \(x) x + 1))

```

Example 2:

```{r}

as_vector(map(our_numbers, \(cashew) cashew + 1))

```

### Syntax Option 3

Syntax: `map(vector, \(x) function(x))`

Summary: for custom functions and/or functions that need strong control over where x goes

#### Breakdown

The first argument in the map function is always our vector. This is then always followed by a comma no matter what. Once again we then write `\(x)`, which is saying that from this point on the vector is now "x". This is then followed by a named function, that **includes** brackets, and within the brackets you place your "x" which looks like: `function(x)`. IMPORTANT! In this syntax this is **no comma** between `\(x)` and the code you want to apply.

#### Why Choose This Way?

This final option is the most verbose, but almost most robust method of writing a map function. This option is useful when you need to be very specific about where x goes in your repeated function. For example, if x is meant to be the second argument for some reason. There are no real downsides to this method, and it can technically be used in any scenario, but in a lot of cases you will find that it is overkill.

Here are a few demonstrations of the benefits of this option, first we need to create a custom function where we deliberately want x to be the second argument:

```{r}

#create a custom function to demonstrate if for some reason x needs to go somewhere else
custom_func <- function(a = 1, b) {b = b + a}

```

Then, if we don't explicitly put x as the second argument (i.e. if we were to try and use syntax option 1) we would get this error:

```{r}
#| error: TRUE

#will not work without direct placement
as_vector(map(our_numbers, custom_func))


```

So instead, we use syntax option 3 and directly tell x where it needs to go:

```{r}

#working version
as_vector(map(our_numbers, \(x) custom_func(, x)))

```

And as a bonus, our custom function also allows us to change how much is added to each element by changing the first argument:

```{r}

#working version
as_vector(map(our_numbers, \(x) custom_func(5, x)))

```



`map2(vect, vect2, \(x,y) x + y)`

`map2(vect, vect2, custom_fun)`



Things I want to break down

 - purrr and map (what is is and how it works)
 - how to create your own
 - if it is faster (I want to learn how to do speed tests)
 - Where I use it in my everyday work



Main points to hit

 - key: this is the natural follow up from writing your own function AND from creating for loops
 - the comparison between for loops and vectorised functions, why should you try to move over to vectorised functions
    - improved run time (usually)
    - human time (more important) - although sometimes I doubt readability
 - how did I learn to understand vectorised functions
 - what is a compelling reason to try/learn
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 