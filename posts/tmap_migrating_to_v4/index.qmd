---
title: "Migrating to Version 4 of the tmap R Package"
date: "01/04/2025"
abstract-title: "ABSTRACT"
abstract: "My favourite mapping package just released a major update! In this post I discuss the changes made as they relate to my work, and provide some tips and tricks I have learnt so far when migration from Version 3.0 to Version 4.0."
image: "image.png"
format: html
title-block-banner: true #This is our banner
include-after-body: "../../html/html_footer.html" #This is our footer
---

```{r}
#| output: FALSE
#| echo: FALSE
#| code-fold: TRUE

library(tmap)
library(dplyr)

```

# Introduction

The tmap package is one of my all time favourite R packages, and this latest update only solidified this opinion. I highly recommend that you check out the main page [here](https://r-tmap.github.io/tmap/index.html), and take the time to read over some of the documents in each of the tabs. 

As of the 27th of January, 2025, tmap version 4.0 was released, and with it came some BIG changes. The authors have done a great job making sure that the update is backwards compatible with your current code, however moving forward it is very important to start doing things the "new" way, as the "old" way will no longer be receiving updates. One of the most impactful updates in my opinion, is changes to the syntax used within a lot of the core functions. This new syntax makes things easier to understand, cleaner, and provides greater flexibility in the creation of your maps. However it can be a confusing journey to undergo the transition. You will find that for alot of the old v3 code there are now warning/pop-up messages to help you with the transition, but there are a few things that slip few the cracks and I think it is sometimes just easier to see some examples. Below I run through how my code for making maps using tmap used to look, and then discuss the changes that have happened and how things look now! 

:::{.callout-note}
New datasets have also been added for demonstration purposes as well as the ability to extent tmap (to do things like map very unique spatial data types, or creating map overlays in a 3D environment). We won't be covering those in this blog, but they are very interesting in their own right.
:::

# How things Used to Look

:::{.callout-note}
For the purposes of this blog I will assume a basic understanding of the tmap package and won't be explaining in detail what each function is/does.
:::

Right, so in version 3.0, how did things look? Well, if I'm honest they looked a little messy. I found that there was only a moderate level of consistency between the arguments in each function, and that arguments within a function that match together didn't always make that fact obvious. For example, lets look at the arguments in the `tm_polygons()` function:

```{r}
#| eval: FALSE

tm_polygons(col,
            border.col,
            alpha,
            palette,
            legend.show,
            ...)

```

:::{.callout-note}
There are many more arguments in `tm_polygons()` than what I have listed above, but the general idea remains the same for the arguments I haven't listed.
:::

... seems fine I guess. But what if I now add in the `tm_borders()` function:


```{r}
#| eval: FALSE

tm_borders(col,
           ...)


```

Okay so now we need the additional context of knowing that "col" in `tm_polygons()` changes the colour inside the polygon, where as "col" in `tm_borders()` changes the colour of the border of the polygon. (See how `tm_polygons()` also has a "border.col" argument). Confusing! Moving on, lets look at the alpha (transparency) argument. Does that change the alpha of the col or the border? You would have to read the documentation to know that. What about the palette argument? Col or Border?... Extra confusing. But it gets worse! There is only one palette argument, so how do you change the palette for the inside of the polygon independently to the palette for the border of the polygons. You can't, so you must use the `tm_polygons()` and `tm_borders()` functions together. Just making the conflict between "col" more obvious. Arrgh!

Enough ranting, lets look at a worked example of a map made using tmap version 3.0:

```{r}
#| output: FALSE

#extract a subset of dat from the dataset provided with the tmap package
example_data <- NLD_muni |> 
  filter(province == "Fryslan")

#create a map using the version 3.0 syntax
v3_map <- tm_shape(example_data) +
  tm_polygons(col = "name", border.col = "black", alpha = 0.8, palette = "Pastel1", legend.show = T) +
  tm_text("name", shadow = T, auto.placement = T, size = 0.6) +
  tm_shape(example_data) +
  tm_borders("name") +
  tm_layout(legend.bg.color = "white", legend.frame.color = "black", asp = 1.1,
            legend.outside = TRUE)

```

```{r}

#print the map
v3_map

```

# How Things Look Now

In comparison to the version 3 code required to produce this map, the new syntax available with tmap version 4 is much more consistent, concise, and also somehow does more with less. For example, lets look at the arguments in the `tm_polygons()` function again, right now we will just replace 1 to 1 the arguments we looked at before:

```{r}
#| eval: FALSE

tm_polygons(fill, #this was "col"
            col, #this was "border.col"
            fill_alpha, #this was "alpha"
            fill.scale, #this was "palette"
            fill.legend, #this was "legend.show"
            ...)

```

At first glance this doesn't seem a whole lot better, there are now just a lot of "fill" arguments. But lets have a look at `tm_borders()` now:

```{r}
#| eval: FALSE

tm_borders(col, #this was "col", and still is "col"
           ...)

```

Right away we can see the first problem has been addressed. "Col" now always refers to the colour of the line/outline/border, whereas "fill" always refers to the inside/fill of the shape. Secondly, the confusion around alpha has been removed, we can see that "alpha" is now "fill_alpha", but even cooler, there is actually also a "col_alpha" now, the alphas' are independent! The same logic has been applied to "palette", which is now "fill.scale" (we will cover the change from palette to scale later), and the legend arguments, which now have "fill" in front of them. So what we have now is something like this:

```{r}
#| eval: FALSE

tm_polygons(fill, #what variable defines the "fill" of the polygons
            fill.scale, #what palette, breaks, style, etc. should the be used to colour the polygons
            fill.legend, #do you want a legend? What should it look like for the fill variable
            fill.free, #should the scale be free for multiples (facets etc.)
            fill_alpha, #how transparent should the fill colour be
            col, #what variable defines the "col" (border) of the polygons
            col.scale, #what palette, breaks, style, etc. should the be used to colour the borders
            col.legend, #do you want a legend? What should it look like for the col variable
            col.free, #should the scale be free for multiples (facets etc.)
            col_alpha, #how transparent should the border colour be
            ...)

```

It could not be more obvious what each argument does now. Lets now make the same map as above, but this time with the version 4.0 syntax:

```{r}
#| output: FALSE

#create a map using the version 4.0 syntax
v4_map <- tm_shape(example_data) +
  tm_polygons(fill = "name", 
              fill.scale = tm_scale_categorical(values = "brewer.pastel1"),
              fill.legend = tm_legend(show = T),
              fill_alpha = 0.8,
              col = "name",
              col.scale = tm_scale_categorical(values = "brewer.set2"),
              col.legend = tm_legend(show = T)) +
  tm_text("name", 
          size = 0.6,
          options = opt_tm_text(shadow = TRUE, 
                                point.label = TRUE)) +
  tm_layout(legend.bg.color = "white",
            legend.frame.color = "black",
            legend.outside.position = tm_pos_out("right", "top"),
            asp = 1.1)
    
```

```{r}

#print the map
v4_map

```

Ignoring the fact that this isn't the most visually appealing map, it is now very easy to isolate exactly what each argument does and how we can adjust different aspects of the map.

# A Visually Appealing Map

I think it is now about time to produce a map that is actually visually appealing!

:::{.callout-note}
There is a lot happening in the code for this map. If you're interested in learning whats going on, I break it down in detail over in my other blog post: [LINK]
:::

## Prepare the Datasets

### Background

```{r}

#load packages required
library(sf)

#load in the background data
background <- read_sf("Europe_coastline_poly.shp")

#change the crs of the background data to match our Netherlands dataset
background <- st_transform(background, st_crs(NLD_prov))
                      
#create a single polygon of the province dataset
NLD_prov_single <- st_union(NLD_prov)

#remove any holes within the polygon then make the shape valid
NLD_prov_single <- nngeo::st_remove_holes(NLD_prov_single) |> 
  st_make_valid()
                      
#take the full background dataset and cut a hole out of the same as the single polygon of the NLD_prov
background_no_NLD <- st_difference(background, NLD_prov_single)

#take the background with a hole in in, a crop it to a buffered bbox of the NLD_prov dataset (reduce file size)
background_final <- st_intersection(background_no_NLD, st_as_sfc(st_bbox(st_buffer(NLD_prov_single, 60000))))

```

### France/World

```{r}

#get the full world dataset
world_background <- World

#extract France from the dataset
france_test <- world_background |> 
  filter(name == "France")

#view the france dataset (to demonstrate the naming issue)
tm_shape(france_test) +
  tm_polygons(fill.scale = tm_scale_categorical()) +
  tm_text(text = "iso_a3",
          size = 1,
          options = opt_tm_text(shadow = T))

#convert france to a individual polygons
france_test <- france_test |> 
  st_cast("POLYGON") |> 
  mutate(ID = row_number())

#view the france dataset (to demonstrate the naming issue)
tm_shape(france_test) +
  tm_polygons(fill = "ID",
              fill.scale = tm_scale_categorical()) +
  tm_text(text = "iso_a3",
          size = 1,
          options = opt_tm_text(shadow = T))

#select the core columns we need
france_test <- france_test |> 
  select(name, iso_a3)

#remove france from the original world dataset and select the core columns we need
world_no_france <- world_background |> 
  filter(name != "France") |> 
  select(name, iso_a3)

#join france back to the world dataset (sans france)
world_final <- rbind(world_no_france, france_test)

```

## Create the Inset Map

```{r}

#load the required packages
library(grid)

#create a bounding box of the municipality dataset
NLD_bbox <- st_as_sfc(st_bbox(NLD_muni))

#create a much larger buffer of the municipality dataset to set the perspective of the inset map
NLD_positioning <- st_as_sfc(st_bbox(st_buffer(NLD_muni, dist = 1500000)))

#create the inset map that will be put into the viewport
inset_map <- tm_shape(NLD_positioning, is.main = TRUE) +
  tm_polygons(fill_alpha = 0,
              col_alpha = 0) +
  tm_shape(world_final) +
  tm_polygons(fill = "#99B5B1") +
  tm_text(text = "iso_a3",
          size = 0.3,
          options = opt_tm_text(shadow = T,
                                shadow.offset.x = 0.01,
                                shadow.offset.y = 0.01)) +
  tm_shape(NLD_bbox) +
  tm_borders(lwd = 2, 
             col = "#8E3B46") +
  tm_layout(asp = 0,
            bg.color = "#C1DEEA",
            outer.bg.color = "#F2F2F2") 

```



```{r}

#view the inset map
inset_map

#save the inset map
tmap_save(inset_map, "inset_map.png")

```

## Create the Main Map

```{r}
  
#for some reason the v4 and v4.1 layouts are slightly different. So we will use the 4.1 layout to get ahead of future changes
#remotes::install_github("r-tmap/tmap")

#access the netherlands province data
prov_2 <- NLD_prov |> 
  mutate(UseMe = "Province")

#access the netherlands district data
dist_2 <- NLD_dist |> 
  mutate(population = population+1)

#access the netherlands municipality data
muni_2 <- NLD_muni |> 
  mutate(UseMe = "Municipality")

#create the map
map <- tm_shape(background_final) +
  tm_polygons(fill = "#99B5B1") +
  tm_shape(dist_2, is.main = T) +
  tm_polygons(fill = "population",
              fill.scale = tm_scale_continuous_log2(values = c("#FFFFFF","#00252A"),
                                                   ticks = c(1, 10000, 100000)),
              fill.legend = tm_legend(title = "Population:",
                                      position = tm_pos_out("right", "center"),
                                      title.color = "black",
                                      reverse = TRUE),
              col_alpha = 0) +
  tm_shape(muni_2) +
  tm_borders(col = "UseMe",
             col.scale = tm_scale_categorical(values = "#E6AA04"),
             col.legend = tm_legend(title = "",
                                    position = tm_pos_out("right", "center"),
                                    lwd = 2),
             lwd = 1) +
  tm_shape(prov_2) +
  tm_borders(col = "UseMe", 
             col.scale = tm_scale_categorical(values = "#8E3B46"),
             col.legend = tm_legend(title = "",
                                    position = tm_pos_out("right", "center")),
             lwd = 2) +
  tm_layout(bg.color = "#C1DEEA",
            legend.bg.color = "white",
            asp = 0,
            outer.bg.color = "#F2F2F2") +
  tm_credits("© Data: Statistics Netherlands, Software: R-tmap", 
             position = c("LEFT", "BOTTOM"),
             size = 0.5) +
  tm_compass(type = "rose", 
             position = c("LEFT", "TOP"),
             color.dark = "black", 
             color.light = "white",
             size = 3.5)


#add major cities:

#Amsterdam, Rotterdam, The Hague, and Utrecht.

```



```{r}

#view the map
map

#save the map
tmap_save(map, "main_map.png", height = 6, width = 8)

```

## Arrange Maps

```{r}


#figure out where to place the view port
inset_viewport <- viewport(y = 0.015, x = 0.98, width = 0.33, height = 0.33, just = c("right", "bottom"))

#save map
tmap_save(map, "combined_map.png", insets_tm = inset_map, insets_vp = inset_viewport, height = 6, width = 8)

```

# Some Other Subtle Changes

```{r}




#map <- tm_shape(seagrass, is.master = T) +
#  tm_borders(alpha = 0) +
#  tm_shape(qld) +
#  tm_polygons(col = "grey80") +
#  tm_shape(dt_background) +
#  tm_polygons(col = "grey90", border.col = "black") +
#  tm_shape(dt_marine) +
#  tm_polygons(col = "Geographic Area: All", border.col = "black", alpha = 0.3, palette = "Pastel1", legend.show = T) +
#  water_map +
#  tm_shape(tsv) +
#  tm_symbols(size = 0.3, col = "white", border.col = "black", border.lwd = 1, shape = 23) +
#  tm_text("PlaceName", shadow = T, auto.placement = T, size = 0.6) +
#  tm_shape(seagrass) +
#  tm_polygons(col = "Meadow ID", palette = "Set3", border.col = "black", legend.show = F) +
#  tm_text("Meadow ID", shadow = T, auto.placement = T, size = 1.5) +
#  tm_layout(legend.bg.color = "white", legend.frame = "black", asp = 1.1,
#            legend.position = c("left", "bottom"))



```



Main points to hit

 - demonstrate I can do mapping
 - show some things i used to do
 - show how i have updated those things
 
 
 Here is an example of what i used to do:
 
```{r}
 
 #build on these two layers with customization

 
```

things i have noticed

 - is.master is now is.main. doesn't seem to be a note of that one
 - auto.placement is now under opt_tm_text(point.label = T)
 - shadow is now under opt_tm_text(shadow = T)
 - organisation is much cleaner now, all the fill.xyz can be put together and it is easy to spot which arguments relate to one another
 - setting colours and styles makes much more sense now. doing the cat vs cont, and setting the palette etc.
 - my preferred lay out has changed. I now like to list each argument under the next - helps with grouping but does make code have more lines
 
 
 rasters have also changed alot.
 
 before:
 
```{r}
 
#map <- tm_shape(qld) +
#        tm_polygons(col = "grey80", border.col = "black") +
#        tm_shape(get(bas_map_type[j]), is.master = T) +
#        tm_raster(legend.reverse = T, palette = pal_type[j], midpoint = mid_type[[j]], style = "fixed", breaks = get(break_type[j])) 

 
```
 
 
after:

```{r}


#  tm_shape(qld) +
#      tm_polygons(fill = "grey80", 
#                  col = "black") +
#      tm_shape(get(reg_map_type[j]), is.main = T) +
#      tm_raster(col.scale = tm_scale_intervals(style = "fixed",
#                                               breaks = get(break_type[j]),
#                                               midpoint = mid_type[[j]],
#                                               values = pal_type[j]),
#                col.legend = tm_legend(reverse = T))

```
 

facet is much easier.

before:

```{r}
#| eval: FALSE

#using unique regions
for (i in n3_marine_names) {
  
  #filter all basins by region
  region_basins <- n3_marine_region |> filter(Region == i)
  
  #get the associated basins
  basins <- n3_basins |> filter(Region == i)
  
  #create counter for j loop
  count <- 0
  
  #using years vector created by data sourcing script
  for (j in time(n3_dhw_5y)){
    
    #track counter
    count <- count + 1
    
    #mask to the specific region and year
    single_year_region <- trim(mask(n3_dhw_5y[[time(n3_dhw_5y) == j]], vect(region_basins)))
  
    #for the first map make a legend
    if (count == 1){
      
      #plot
      map <- tm_shape(single_year_region) +
        tm_raster(palette = dhw_cols, breaks = c(1:6), labels = dhw_lab) +
        tm_shape(qld) +
        tm_polygons(col = "grey80", border.col = "black") +
        tm_shape(region_basins, is.master = T) +
        tm_borders(col = "black") +
        tm_shape(basins) +
        tm_polygons(col = "grey90", border.col = "black") +
        tm_layout(asp = 5, legend.show = F, main.title = year(time(single_year_region)), main.title.position = "centre")
      
      #save the map
      assign(glue("map{count}"), map)
      
      #make a legend map
      legend_map <- tm_shape(single_year_region) + 
        tm_raster(palette = dhw_cols, breaks = c(1:6), labels = dhw_lab, legend.reverse = T, 
                  title = "Coral bleaching likelihood \n and number of DHW's") +
        tm_layout(legend.only = T, legend.title.size = 3,
                  legend.text.size = 1.6, legend.position = c(0, 0.3))
      
    #otherwise, no legend
    } else {
        
      #plot
      map <- tm_shape(single_year_region) +
        tm_raster(palette = dhw_cols, breaks = c(1:6), labels = dhw_lab) +
        tm_shape(qld) +
        tm_polygons(col = "grey80", border.col = "black") +
        tm_shape(region_basins, is.master = T) +
        tm_borders(col = "black") +
        tm_shape(basins) +
        tm_polygons(col = "grey90", border.col = "black") +
        tm_layout(asp = 5, legend.show = F, main.title = year(time(single_year_region)), main.title.position = "centre")
      
      #save the map
      assign(glue("map{count}"), map)
        
    }
  }  
  
  #arrange into two rows
  facet_map <- tmap_arrange(map1, map2, map3, map4, map5, nrow = 2)
  
  #edit variable name for better save path
  i_lower <- tolower(gsub(" ", "-", i))
 
  #save the map as a png
  tmap_save(facet_map, filename = glue("{output_path}/plots/{i_lower}_dhw_fyear-{current_fyear}-to-{current_fyear-4}.png"))
  
  #save the legend seperately
  tmap_save(legend_map, glue("{output_path}/plots/{i_lower}_dhw_fyear-{current_fyear}-to-{current_fyear-4}_legend.png"))
  
}


```

after:


```{r}
#| eval: FALSE

#plot
  facet_map <- tm_shape(all_year_region) +
    tm_raster(col.scale = tm_scale_intervals(values = dhw_cols, 
                                             breaks = c(1:6),
                                             labels = dhw_lab),
              col.free = FALSE,
              col.legend = tm_legend(title = "Coral bleaching likelihood and number of DHW's")) +
    tm_shape(qld) +
    tm_polygons(fill = "grey80",
                col = "black") +
    tm_shape(region_basins, is.main = T) +
    tm_borders(col = "black") +
    tm_shape(basins) +
    tm_polygons(fill = "grey90", 
                col = "black") +
    tm_layout(panel.labels = year(time(n3_dhw_5y))) +
    tm_facets_hstack()


```















