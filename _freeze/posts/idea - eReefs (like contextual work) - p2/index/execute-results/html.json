{
  "hash": "7cb1a268af7e1b259c7bee2efb51d48e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Creating Beautiful Plots using eReefs Data\"\ndate: \"05/23/2025\"\nabstract-title: \"ABSTRACT\"\nabstract: 'In this blog I demonstrate how you can make beautiful plots in R using example data extracted from the eReefs platform. You can follow along with any of your own data.'\nimage: \"image.png\"\nformat: html\ntitle-block-banner: true #This is our banner\ninclude-after-body: \"../../html/html_footer.html\" #This is our footer\n---\n\n\n::: {.cell}\n\n:::\n\n\n# Introduction\n\nIn this blog we are going to learn how to create some visually interesting plots in R. The package we are going to be using is ggplot2, and the data we are going to be using is from eReefs. If you are interested in getting an exact copy of the data I recommend you check out my other blog; [The Extraction of Highly Specialised Modeled Data from eReefs](../extracting_data_from_ereefs/index.qmd), however you can still follow along just fine using your own data.\n\n# Data\n\nLets first load in the data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#read in data\nexample_data <- read_csv(\"chla_ereefs_data.csv\")\n```\n:::\n\n\nThis data has 441400 rows and 2 columns. The column names are Date and Value:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(example_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 2\n  Date                Value\n  <dttm>              <dbl>\n1 2023-07-01 02:00:00 0.256\n2 2023-07-05 02:00:00 0.229\n3 2023-07-09 02:00:00 0.374\n4 2023-07-13 02:00:00 0.292\n5 2023-07-17 02:00:00 0.290\n6 2023-07-21 02:00:00 0.318\n```\n\n\n:::\n:::\n\n\nIf we ordered this data by date we would see that there are several hundred rows of data that belong to the exact same date and time. This is because the original source of this data was a spatial file - it had a grid of values for each date:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(arrange(example_data, Date))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 2\n  Date                Value\n  <dttm>              <dbl>\n1 2023-07-01 02:00:00 0.256\n2 2023-07-01 02:00:00 0.220\n3 2023-07-01 02:00:00 0.209\n4 2023-07-01 02:00:00 0.239\n5 2023-07-01 02:00:00 0.261\n6 2023-07-01 02:00:00 0.226\n```\n\n\n:::\n:::\n\n\nThe value column is the concentration of chlorophyll a in the water column, measured in micrograms per litre. Lets update that.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexample_data <- rename(example_data, \"Chla (ug/L)\" = \"Value\")\n\nhead(example_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 2\n  Date                `Chla (ug/L)`\n  <dttm>                      <dbl>\n1 2023-07-01 02:00:00         0.256\n2 2023-07-05 02:00:00         0.229\n3 2023-07-09 02:00:00         0.374\n4 2023-07-13 02:00:00         0.292\n5 2023-07-17 02:00:00         0.290\n6 2023-07-21 02:00:00         0.318\n```\n\n\n:::\n:::\n\n\n:::{.callout-note}\nPlease note that it is generally bad form to include spaces in your column names, but I am doing it to reduce the code needed for the plotting section. You will see I have to refer to the column name using ticks (``) to make the ggplot code work because of the space in the column name.\n:::\n\n# Plotting\n\nDue to our cursory exploration of the data we already know a few things:\n\n - There is a lot of data\n - Data has a time element\n - There are multiple data points per time step\n - Values are the concentration of chlorophyll a, if you are not an environmental scientist this means the data is continuous, and should not contain negative values.\n \n## Distribution and Log Transformation\n\nHowever what we don't know is about the distribution of the data. Below is a histogram of our data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(example_data) +\n  geom_histogram(aes(x = `Chla (ug/L)`), \n                 bins = 150,\n                 fill = \"#00252A\") +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nClearly this data is heavily right skewed. Although we wont be doing any statistical analysis this distribution will still impact how our plot looks. So to make things a bit nice we will look at the data with a log 10 transformation:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(example_data) +\n  geom_histogram(aes(x = `Chla (ug/L)`), \n                 bins = 150,\n                 fill = \"#8E3B46\") +\n  scale_x_log10() +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nLooking good.\n\nNow, knowing a bit more abut the distribution lets consider what kind of plot we want to make. Of course it is up to you, but I know that when I see a time variable and a value, I am thinking lines and/or dot plots.\n\nIn its most basic form here is a dot plot:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(example_data) +\n  geom_point(aes(x = Date, y = `Chla (ug/L)`), \n             color =  \"#E6AA04\") +\n  scale_y_log10() +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nA few things to note:\n\n - As we have already covered, there is a shit ton of data and actually plotting all the points takes several minutes (boring).\n - It looks like there are some trends but it is a bit hard to tell, particularly because the number of points makes it difficult to identify areas of high, mid, or low density that might affect the trends\n\nFor the first point, a simple solution is to take a random subset of data to make plotting more efficient. For the second point, this will in part be fixed by the sub sampling, but we will also be adding extra visuals to this plot as we go along.\n\n## Subsetting Data\n\nTo do our sub-setting we will use the `slice_sample()` function. To ensure that we get the same number of randomly sampled points from each day we will make sure to first group our data by the Date column. In total we want to randomly select 150 data points from each day - still quite a lot.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexample_data_subset <- example_data |> \n  group_by(Date) |> \n  slice_sample(n = 150) |> \n  ungroup()\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(example_data_subset) +\n  geom_point(aes(x = Date, y = `Chla (ug/L)`), \n             color =  \"#E6AA04\") +\n  scale_y_log10() +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\nAwesome, right away we can see that it is likely that the values dip down towards the end of the graph. Note that this might be a product of the random sampling, but that is highly unlikely.\n\n## Additional Visuals\n\nSomething that will help us determine how the data trends over time would be a nice would be a line that follows the daily mean. We will calculate this line using the full dataset to make sure of the trend we spotted above.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexample_data_daily_mean <- example_data |> \n  group_by(Date) |> \n  summarise(`Chla (ug/L)` = mean(`Chla (ug/L)`))\n\n\nggplot() +\n  geom_point(data = example_data_subset, \n             aes(x = Date, y = `Chla (ug/L)`), \n             color = \"#E6AA04\") +\n  geom_line(data = example_data_daily_mean, \n            aes(x = Date, y = `Chla (ug/L)`), \n            color = \"#00252A\",\n            lwd = 1) +\n  scale_y_log10() +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\nThis line confirms that the values do indeed decrease towards the end of the graph, but the line is a bit ugly no? A common replacement in this scenario is to use a Generalized Additive Model (GAM) which creates a smoothing spline that also reveals trends but is not so harsh: \n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot() +\n  geom_point(data = example_data_subset, \n             aes(x = Date, y = `Chla (ug/L)`), \n             color = \"#E6AA04\") +\n  geom_smooth(data = example_data,\n              aes(x = Date, y = `Chla (ug/L)`), \n              method = \"gam\", \n              formula = y ~ s(x), \n              color = \"#00252A\",\n              se = F) +\n  scale_y_log10() +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\nSomething else of interest with time series data is often how things are doing relative to a long-term mean. This mean might be an annual mean, or a mean of all the available data, or a mean of some historical reference period. For us, we will just look at the annual mean:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#calculate group mean to use for the yintercept line from the full dataset\nannual_mean <- example_data |>\n  summarise(`Mean Chla (ug/L)` = mean(`Chla (ug/L)`, na.rm = T)) |> \n  as.numeric() |> \n  round(4)\n\nggplot() +\n  geom_point(data = example_data_subset, \n             aes(x = Date, y = `Chla (ug/L)`), \n             color = \"#E6AA04\") +\n  geom_hline(yintercept = annual_mean,\n             colour = \"#628395\",\n             lwd = 1.3) +\n  geom_smooth(data = example_data,\n              aes(x = Date, y = `Chla (ug/L)`), \n              method = \"gam\", \n              formula = y ~ s(x), \n              color = \"#00252A\",\n              se = F) +\n  scale_y_log10() +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\nAs expected, the smoothed GAM line fluctuates above and below the annual mean. You might initially think that the GAM line goes waaay below the mean towards the end of the plot but remember this is all visualised with a log10 y axis.\n\nThe next thing I would like to add is some sort of visual cue to significant season. In the Townsville region where we are currently looking at the data there are only two season; \"wet\" and \"dry\". This is loosely associated with summer and winter, with hundreds to thousands of millimeters of rain falling in summer and often less than one hundred falling in all of winter. The reason we care about rainfall is that it is one of the most significant drivers of chlorophyll a concentrations in the ocean. The rain on land brings lots of nutrients down the rivers and out onto the reef, nutrients which phytoplankton consume and then produce chlorophyll a (simplified explanation).The exact cut-off dates we will use for the wet season/dry season are March and October.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#assign either the wet or dry season to each row of data\nexample_data_subset <- example_data_subset |> \n  mutate(Season = case_when(month(Date) > 4 & month(Date) < 11 ~ \"Dry\", T ~ \"Wet\"))\n  \nggplot() +\n  geom_point(data = example_data_subset, \n             aes(x = Date, y = `Chla (ug/L)`, \n                 color = Season)) +\n  geom_hline(yintercept = annual_mean,\n             colour = \"#628395\",\n             lwd = 1.3) +\n  scale_color_manual(values = c(\"#E6AA04\", \"#8E3B46\")) +\n  geom_smooth(data = example_data,\n              aes(x = Date, y = `Chla (ug/L)`), \n              method = \"gam\", \n              formula = y ~ s(x), \n              color = \"#00252A\",\n              se = F) +\n  scale_y_log10() +\n  theme_bw()\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\nThere is only one more thing I would like to add to this plot, and it is mainly due to personal preference. But in this case, I would like to overlay a violin plot to further highlight the distribution of the data we are dealing with.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexample_data_subset <- example_data_subset |> \n  mutate(Date = as.Date(Date))\n\nexample_data <- example_data |> \n  mutate(Date = as.Date(Date))\n\nggplot() +\n  geom_point(data = example_data_subset, \n             aes(x = Date, y = `Chla (ug/L)`, \n                 color = Season)) +\n  geom_hline(yintercept = annual_mean,\n             colour = \"#628395\",\n             lwd = 1.3) +\n  scale_color_manual(values = c(\"#E6AA04\", \"#8E3B46\")) +\n  geom_smooth(data = example_data,\n              aes(x = Date, y = `Chla (ug/L)`), \n              method = \"gam\", \n              formula = y ~ s(x), \n              color = \"#00252A\",\n              se = F) +\n  geom_violin(data = example_data_subset,\n              aes(x = Date, y = `Chla (ug/L)`),\n              alpha = 0.4, \n              color = \"Black\") +\n  scale_y_log10() +\n  scale_x_date(breaks = pretty_breaks(6)) +\n  labs(x = \"Date\", y = \"Chla (ug/L) (Log10 Scale)\") +\n  theme(panel.grid.major = element_blank(), \n          panel.grid.minor = element_blank())\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\nExtensions:\n\n - I want to pull in several years of data and create a facet of plots\n - thats it I think\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#save the individual plots\n#ggsave(\"path\", summary_plot, width = 15, height = 5)\n```\n:::\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}